{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nanyang/AY20S2/CS9080/LookingGlass/lookingglass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nanyang/AY20S2/CS9080/LookingGlass/lookingglass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/* Adapted from okfn/csv.js under MIT license\nhttps://github.com/okfn/csv.js/blob/master/LICENSE.txt\nCopyright (c) 2011-2013 Open Knowledge Foundation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/function chomp(s,lineterminator){if(s==null)return'';lineterminator=lineterminator||'\\n';if(s.charAt(s.length-lineterminator.length)!==lineterminator){// Does not end with \\n, just return string\nreturn s;}else{// Remove the \\n\nreturn s.substring(0,s.length-lineterminator.length);}}/**\n * Fetch data from a URL and parse the response as a CSV file.\n * To specify the data source, use `dataset.url`. \n * @param {Object} dataset \n * @returns {Promise} which invokes resolve with an array of objects of length \n * [csv row count - 1], where the \n * property names are determined by the first row.\n */export function fetchCSV(_x){return _fetchCSV.apply(this,arguments);}function _fetchCSV(){_fetchCSV=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dataset){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",new Promise(function(resolve,reject){if(dataset.data){var out=extractFields(parse(dataset.data,dataset),dataset);out.useMemoryStore=true;resolve(out);}else if(dataset.url){window.fetch(dataset.url,{mode:'cors'}).then(function(response){if(response.status!=200){if(response.headers.get('content-type')==\"application/json\"){response.text().then(function(text){reject(JSON.parse(text));});}else{reject({status_code:response.status,message:\"Error fetching CSV: [\".concat(response.status,\" \").concat(response.statusText,\"]\")});}return;}if(response.text){return response.text();}else{return response;}}).then(function(data){if(data){// dataset is the url from google spreadsheet\nvar out=parseObjects(data,dataset);out.useMemoryStore=true;resolve(out);}}).catch(function(msg){reject({status_code:500,message:\"Error fetching CSV: \".concat(msg)});return;});}}));case 1:case\"end\":return _context.stop();}}},_callee);}));return _fetchCSV.apply(this,arguments);};/**\n * Given an array of rows, split them into an object with two keys:\n * `fields` and `records`. `fields` is the first item of the array\n * and `records` is the remainder. If `noFields.noHeaderRow` is true, \n * the returned object will not have a `fields` property and its `records`\n * property will be the entire array of input `rows`.\n * @param {Array} rows \n * @param {Object} [noFields]\n */export function extractFields(rows,noFields){noFields=noFields||{};if(noFields.noHeaderRow!==true&&rows.length>0){return{fields:rows[0].map(function(x,i){if(x&&x.trim){return x.trim();}return\"untitled\".concat(i);}),records:rows.slice(1)};}else{return{records:rows};}};function normalizeDialectOptions(options){// note lower case compared to CSV DDF\nvar out={delimiter:\",\",doublequote:true,lineterminator:\"\\n\",quotechar:'\"',skipinitialspace:true,skipinitialrows:0};for(var key in options){if(key===\"trim\"){out[\"skipinitialspace\"]=options.trim;}else{out[key.toLowerCase()]=options[key];}}return out;};// ## parse\n//\n// For docs see the README\n//\n// Heavily based on uselesscode's JS CSV parser (MIT Licensed):\n// http://www.uselesscode.org/javascript/csv/\nexport function parse(s,dialect){// When line terminator is not provided then we try to guess it\n// and normalize it across the file.\nif(!dialect||dialect&&!dialect.lineterminator){s=normalizeLineTerminator(s,dialect);}// Get rid of any trailing \\n\nvar options=normalizeDialectOptions(dialect);s=chomp(s,options.lineterminator);var cur=\"\",// The character we are currently processing.\ninQuote=false,fieldQuoted=false,field=\"\",// Buffer for building up the current field\nrow=[],out=[],i,processField;processField=function processField(field){if(fieldQuoted!==true){// If field is empty set to null\nif(field===\"\"){field=null;// If the field was not quoted and we are trimming fields, trim it\n}else if(options.skipinitialspace===true){field=field.trim();}// Convert unquoted numbers to their appropriate types\n// but Timeline never expects real numbers, so we'll leave that out here.\n// if (rxIsInt.test(field)) {\n//     field = parseInt(field, 10);\n// } else if (rxIsFloat.test(field)) {\n//     field = parseFloat(field, 10);\n// }\n}return field;};for(i=0;i<s.length;i+=1){cur=s.charAt(i);// If we are at a EOF or EOR\nif(inQuote===false&&(cur===options.delimiter||cur===options.lineterminator)){field=processField(field);// Add the current field to the current row\nrow.push(field);// If this is EOR append row to output and flush row\nif(cur===options.lineterminator){out.push(row);row=[];}// Flush the field buffer\nfield=\"\";fieldQuoted=false;}else{// If it's not a quotechar, add it to the field buffer\nif(cur!==options.quotechar){field+=cur;}else{if(!inQuote){// We are not in a quote, start a quote\ninQuote=true;fieldQuoted=true;}else{// Next char is quotechar, this is an escaped quotechar\nif(s.charAt(i+1)===options.quotechar){field+=options.quotechar;// Skip the next char\ni+=1;}else{// It's not escaping, so end quote\ninQuote=false;}}}}}// Add the last field\nfield=processField(field);row.push(field);out.push(row);// Expose the ability to discard initial rows\nif(options.skipinitialrows)out=out.slice(options.skipinitialrows);return out;}/**\n * If no lineterminator is specified in `dialect`, convert CRLF and CR \n * to LF (newline) to simplify splitting lines.\n * @param {String} csvString - a String representation of a CSV file\n * @param {Object} [dialect] - details about the CSV dialect to guide the parser\n */function normalizeLineTerminator(csvString,dialect){if(dialect&&!dialect.lineterminator){return csvString.replace(/(\\r\\n|\\n|\\r)/gm,\"\\n\");}// if not return the string untouched.\nreturn csvString;}/**\n * Given a CSV String, parse it and return it as an array of objects, one-per-row \n * after the header row. The header is the source of object properties. Will fail \n * unceremoniously if dialect.noHeaderRow is true\n * @param {String} s - a String representation of a CSV file\n * @param {Object} [dialect] - details about the CSV dialect to guide the parser\n */export function parseObjects(s,dialect){var rows=extractFields(parse(s,dialect));var objects=[];rows.records.forEach(function(record){var obj={};rows.fields.forEach(function(f,i){return obj[f]=record[i];});objects.push(obj);});return objects;}","map":{"version":3,"sources":["/Users/nanyang/AY20S2/CS9080/LookingGlass/lookingglass/src/core/CSV.js"],"names":["chomp","s","lineterminator","charAt","length","substring","fetchCSV","dataset","Promise","resolve","reject","data","out","extractFields","parse","useMemoryStore","url","window","fetch","mode","then","response","status","headers","get","text","JSON","status_code","message","statusText","parseObjects","catch","msg","rows","noFields","noHeaderRow","fields","map","x","i","trim","records","slice","normalizeDialectOptions","options","delimiter","doublequote","quotechar","skipinitialspace","skipinitialrows","key","toLowerCase","dialect","normalizeLineTerminator","cur","inQuote","fieldQuoted","field","row","processField","push","csvString","replace","objects","forEach","record","obj","f"],"mappings":"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","sourcesContent":["/* Adapted from okfn/csv.js under MIT license\nhttps://github.com/okfn/csv.js/blob/master/LICENSE.txt\nCopyright (c) 2011-2013 Open Knowledge Foundation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nfunction chomp(s, lineterminator) {\n\n    if (s == null) return ''\n\n    lineterminator = lineterminator || '\\n'\n\n    if (s.charAt(s.length - lineterminator.length) !== lineterminator) {\n        // Does not end with \\n, just return string\n        return s;\n    } else {\n        // Remove the \\n\n        return s.substring(0, s.length - lineterminator.length);\n    }\n}\n\n/**\n * Fetch data from a URL and parse the response as a CSV file.\n * To specify the data source, use `dataset.url`. \n * @param {Object} dataset \n * @returns {Promise} which invokes resolve with an array of objects of length \n * [csv row count - 1], where the \n * property names are determined by the first row.\n */\nexport async function fetchCSV(dataset) {\n    return new Promise((resolve, reject) => {\n        if (dataset.data) {\n            var out = extractFields(parse(dataset.data, dataset), dataset);\n            out.useMemoryStore = true;\n            resolve(out);\n        } else if (dataset.url) {\n            window.fetch(dataset.url, { mode: 'cors' })\n                .then(function(response) {\n                    if (response.status != 200) {\n                        if (response.headers.get('content-type') == \"application/json\") {\n                            response.text().then(text => {\n                                reject(JSON.parse(text))\n                            })\n                        } else {\n                            reject({\n                                status_code: response.status,\n                                message: `Error fetching CSV: [${response.status} ${response.statusText}]`\n                            })\n                        }\n                        return;\n                    }\n                    if (response.text) {\n                        return response.text();\n                    } else {\n                        return response;\n                    }\n                })\n                .then(function(data) {\n                    if (data) {\n                        // dataset is the url from google spreadsheet\n                        var out = parseObjects(data, dataset);\n                        out.useMemoryStore = true;\n                        resolve(out);\n                    }\n                })\n                .catch(msg => {\n                    reject({\n                        status_code: 500,\n                        message: `Error fetching CSV: ${msg}`\n                    })\n                    return;\n                });\n        }\n    })\n};\n\n/**\n * Given an array of rows, split them into an object with two keys:\n * `fields` and `records`. `fields` is the first item of the array\n * and `records` is the remainder. If `noFields.noHeaderRow` is true, \n * the returned object will not have a `fields` property and its `records`\n * property will be the entire array of input `rows`.\n * @param {Array} rows \n * @param {Object} [noFields]\n */\nexport function extractFields(rows, noFields) {\n    noFields = noFields || {}\n    if (noFields.noHeaderRow !== true && rows.length > 0) {\n        return {\n            fields: rows[0].map((x, i) => {\n                if (x && x.trim) {\n                    return x.trim()\n                }\n                return `untitled${i}`\n            }),\n            records: rows.slice(1)\n        };\n    } else {\n        return {\n            records: rows\n        };\n    }\n};\n\nfunction normalizeDialectOptions(options) {\n    // note lower case compared to CSV DDF\n    var out = {\n        delimiter: \",\",\n        doublequote: true,\n        lineterminator: \"\\n\",\n        quotechar: '\"',\n        skipinitialspace: true,\n        skipinitialrows: 0\n    };\n    for (var key in options) {\n        if (key === \"trim\") {\n            out[\"skipinitialspace\"] = options.trim;\n        } else {\n            out[key.toLowerCase()] = options[key];\n        }\n    }\n    return out;\n};\n\n// ## parse\n//\n// For docs see the README\n//\n// Heavily based on uselesscode's JS CSV parser (MIT Licensed):\n// http://www.uselesscode.org/javascript/csv/\nexport function parse(s, dialect) {\n    // When line terminator is not provided then we try to guess it\n    // and normalize it across the file.\n    if (!dialect || (dialect && !dialect.lineterminator)) {\n        s = normalizeLineTerminator(s, dialect);\n    }\n\n    // Get rid of any trailing \\n\n    var options = normalizeDialectOptions(dialect);\n    s = chomp(s, options.lineterminator);\n\n    var cur = \"\", // The character we are currently processing.\n        inQuote = false,\n        fieldQuoted = false,\n        field = \"\", // Buffer for building up the current field\n        row = [],\n        out = [],\n        i,\n        processField;\n\n    processField = function(field) {\n        if (fieldQuoted !== true) {\n            // If field is empty set to null\n            if (field === \"\") {\n                field = null;\n                // If the field was not quoted and we are trimming fields, trim it\n            } else if (options.skipinitialspace === true) {\n                field = field.trim();\n            }\n\n            // Convert unquoted numbers to their appropriate types\n            // but Timeline never expects real numbers, so we'll leave that out here.\n            // if (rxIsInt.test(field)) {\n            //     field = parseInt(field, 10);\n            // } else if (rxIsFloat.test(field)) {\n            //     field = parseFloat(field, 10);\n            // }\n        }\n        return field;\n    };\n\n    for (i = 0; i < s.length; i += 1) {\n        cur = s.charAt(i);\n\n        // If we are at a EOF or EOR\n        if (\n            inQuote === false &&\n            (cur === options.delimiter || cur === options.lineterminator)\n        ) {\n            field = processField(field);\n            // Add the current field to the current row\n            row.push(field);\n            // If this is EOR append row to output and flush row\n            if (cur === options.lineterminator) {\n                out.push(row);\n                row = [];\n            }\n            // Flush the field buffer\n            field = \"\";\n            fieldQuoted = false;\n        } else {\n            // If it's not a quotechar, add it to the field buffer\n            if (cur !== options.quotechar) {\n                field += cur;\n            } else {\n                if (!inQuote) {\n                    // We are not in a quote, start a quote\n                    inQuote = true;\n                    fieldQuoted = true;\n                } else {\n                    // Next char is quotechar, this is an escaped quotechar\n                    if (s.charAt(i + 1) === options.quotechar) {\n                        field += options.quotechar;\n                        // Skip the next char\n                        i += 1;\n                    } else {\n                        // It's not escaping, so end quote\n                        inQuote = false;\n                    }\n                }\n            }\n        }\n    }\n\n    // Add the last field\n    field = processField(field);\n    row.push(field);\n    out.push(row);\n\n    // Expose the ability to discard initial rows\n    if (options.skipinitialrows) out = out.slice(options.skipinitialrows);\n\n    return out;\n}\n\n/**\n * If no lineterminator is specified in `dialect`, convert CRLF and CR \n * to LF (newline) to simplify splitting lines.\n * @param {String} csvString - a String representation of a CSV file\n * @param {Object} [dialect] - details about the CSV dialect to guide the parser\n */\nfunction normalizeLineTerminator(csvString, dialect) {\n    if (dialect && !dialect.lineterminator) {\n        return csvString.replace(/(\\r\\n|\\n|\\r)/gm, \"\\n\");\n    }\n    // if not return the string untouched.\n    return csvString;\n}\n\n/**\n * Given a CSV String, parse it and return it as an array of objects, one-per-row \n * after the header row. The header is the source of object properties. Will fail \n * unceremoniously if dialect.noHeaderRow is true\n * @param {String} s - a String representation of a CSV file\n * @param {Object} [dialect] - details about the CSV dialect to guide the parser\n */\nexport function parseObjects(s, dialect) {\n\n    let rows = extractFields(parse(s, dialect))\n    let objects = []\n    rows.records.forEach(record => {\n        let obj = {}\n        rows.fields.forEach((f, i) => obj[f] = record[i])\n        objects.push(obj)\n    })\n    return objects\n}"]},"metadata":{},"sourceType":"module"}