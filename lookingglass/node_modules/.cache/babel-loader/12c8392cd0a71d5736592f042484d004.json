{"ast":null,"code":"/**\n * Returns the object type of the given payload\n *\n * @param {*} payload\n * @returns {string}\n */\nfunction getType(payload) {\n  return Object.prototype.toString.call(payload).slice(8, -1);\n}\n/**\n * Returns whether the payload is undefined\n *\n * @param {*} payload\n * @returns {payload is undefined}\n */\n\n\nfunction isUndefined(payload) {\n  return getType(payload) === 'Undefined';\n}\n/**\n * Returns whether the payload is null\n *\n * @param {*} payload\n * @returns {payload is null}\n */\n\n\nfunction isNull(payload) {\n  return getType(payload) === 'Null';\n}\n/**\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\n *\n * @param {*} payload\n * @returns {payload is PlainObject}\n */\n\n\nfunction isPlainObject(payload) {\n  if (getType(payload) !== 'Object') return false;\n  return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;\n}\n/**\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\n *\n * @param {*} payload\n * @returns {payload is PlainObject}\n */\n\n\nfunction isObject(payload) {\n  return isPlainObject(payload);\n}\n/**\n * Returns whether the payload is a an empty object (excluding special classes or objects with other prototypes)\n *\n * @param {*} payload\n * @returns {payload is { [K in any]: never }}\n */\n\n\nfunction isEmptyObject(payload) {\n  return isPlainObject(payload) && Object.keys(payload).length === 0;\n}\n/**\n * Returns whether the payload is a an empty object (excluding special classes or objects with other prototypes)\n *\n * @param {*} payload\n * @returns {payload is PlainObject}\n */\n\n\nfunction isFullObject(payload) {\n  return isPlainObject(payload) && Object.keys(payload).length > 0;\n}\n/**\n * Returns whether the payload is an any kind of object (including special classes or objects with different prototypes)\n *\n * @param {*} payload\n * @returns {payload is PlainObject}\n */\n\n\nfunction isAnyObject(payload) {\n  return getType(payload) === 'Object';\n}\n/**\n * Returns whether the payload is an object like a type passed in < >\n *\n * Usage: isObjectLike<{id: any}>(payload) // will make sure it's an object and has an `id` prop.\n *\n * @template T this must be passed in < >\n * @param {*} payload\n * @returns {payload is T}\n */\n\n\nfunction isObjectLike(payload) {\n  return isAnyObject(payload);\n}\n/**\n * Returns whether the payload is a function (regular or async)\n *\n * @param {*} payload\n * @returns {payload is AnyFunction}\n */\n\n\nfunction isFunction(payload) {\n  return typeof payload === 'function';\n}\n/**\n * Returns whether the payload is an array\n *\n * @param {any} payload\n * @returns {payload is any[]}\n */\n\n\nfunction isArray(payload) {\n  return getType(payload) === 'Array';\n}\n/**\n * Returns whether the payload is a an array with at least 1 item\n *\n * @param {*} payload\n * @returns {payload is any[]}\n */\n\n\nfunction isFullArray(payload) {\n  return isArray(payload) && payload.length > 0;\n}\n/**\n * Returns whether the payload is a an empty array\n *\n * @param {*} payload\n * @returns {payload is []}\n */\n\n\nfunction isEmptyArray(payload) {\n  return isArray(payload) && payload.length === 0;\n}\n/**\n * Returns whether the payload is a string\n *\n * @param {*} payload\n * @returns {payload is string}\n */\n\n\nfunction isString(payload) {\n  return getType(payload) === 'String';\n}\n/**\n * Returns whether the payload is a string, BUT returns false for ''\n *\n * @param {*} payload\n * @returns {payload is string}\n */\n\n\nfunction isFullString(payload) {\n  return isString(payload) && payload !== '';\n}\n/**\n * Returns whether the payload is ''\n *\n * @param {*} payload\n * @returns {payload is string}\n */\n\n\nfunction isEmptyString(payload) {\n  return payload === '';\n}\n/**\n * Returns whether the payload is a number (but not NaN)\n *\n * This will return `false` for `NaN`!!\n *\n * @param {*} payload\n * @returns {payload is number}\n */\n\n\nfunction isNumber(payload) {\n  return getType(payload) === 'Number' && !isNaN(payload);\n}\n/**\n * Returns whether the payload is a boolean\n *\n * @param {*} payload\n * @returns {payload is boolean}\n */\n\n\nfunction isBoolean(payload) {\n  return getType(payload) === 'Boolean';\n}\n/**\n * Returns whether the payload is a regular expression (RegExp)\n *\n * @param {*} payload\n * @returns {payload is RegExp}\n */\n\n\nfunction isRegExp(payload) {\n  return getType(payload) === 'RegExp';\n}\n/**\n * Returns whether the payload is a Map\n *\n * @param {*} payload\n * @returns {payload is Map<any, any>}\n */\n\n\nfunction isMap(payload) {\n  return getType(payload) === 'Map';\n}\n/**\n * Returns whether the payload is a WeakMap\n *\n * @param {*} payload\n * @returns {payload is WeakMap<any, any>}\n */\n\n\nfunction isWeakMap(payload) {\n  return getType(payload) === 'WeakMap';\n}\n/**\n * Returns whether the payload is a Set\n *\n * @param {*} payload\n * @returns {payload is Set<any>}\n */\n\n\nfunction isSet(payload) {\n  return getType(payload) === 'Set';\n}\n/**\n * Returns whether the payload is a WeakSet\n *\n * @param {*} payload\n * @returns {payload is WeakSet<any>}\n */\n\n\nfunction isWeakSet(payload) {\n  return getType(payload) === 'WeakSet';\n}\n/**\n * Returns whether the payload is a Symbol\n *\n * @param {*} payload\n * @returns {payload is symbol}\n */\n\n\nfunction isSymbol(payload) {\n  return getType(payload) === 'Symbol';\n}\n/**\n * Returns whether the payload is a Date, and that the date is valid\n *\n * @param {*} payload\n * @returns {payload is Date}\n */\n\n\nfunction isDate(payload) {\n  return getType(payload) === 'Date' && !isNaN(payload);\n}\n/**\n * Returns whether the payload is a Blob\n *\n * @param {*} payload\n * @returns {payload is Blob}\n */\n\n\nfunction isBlob(payload) {\n  return getType(payload) === 'Blob';\n}\n/**\n * Returns whether the payload is a File\n *\n * @param {*} payload\n * @returns {payload is File}\n */\n\n\nfunction isFile(payload) {\n  return getType(payload) === 'File';\n}\n/**\n * Returns whether the payload is a Promise\n *\n * @param {*} payload\n * @returns {payload is Promise<any>}\n */\n\n\nfunction isPromise(payload) {\n  return getType(payload) === 'Promise';\n}\n/**\n * Returns whether the payload is an Error\n *\n * @param {*} payload\n * @returns {payload is Error}\n */\n\n\nfunction isError(payload) {\n  return getType(payload) === 'Error';\n}\n/**\n * Returns whether the payload is literally the value `NaN` (it's `NaN` and also a `number`)\n *\n * @param {*} payload\n * @returns {payload is typeof NaN}\n */\n\n\nfunction isNaNValue(payload) {\n  return getType(payload) === 'Number' && isNaN(payload);\n}\n/**\n * Returns whether the payload is a primitive type (eg. Boolean | Null | Undefined | Number | String | Symbol)\n *\n * @param {*} payload\n * @returns {(payload is boolean | null | undefined | number | string | symbol)}\n */\n\n\nfunction isPrimitive(payload) {\n  return isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber(payload) || isString(payload) || isSymbol(payload);\n}\n/**\n * Returns true whether the payload is null or undefined\n *\n * @param {*} payload\n * @returns {(payload is null | undefined)}\n */\n\n\nvar isNullOrUndefined = isOneOf(isNull, isUndefined);\n\nfunction isOneOf(a, b, c, d, e) {\n  return function (value) {\n    return a(value) || b(value) || !!c && c(value) || !!d && d(value) || !!e && e(value);\n  };\n}\n/**\n * Does a generic check to check that the given payload is of a given type.\n * In cases like Number, it will return true for NaN as NaN is a Number (thanks javascript!);\n * It will, however, differentiate between object and null\n *\n * @template T\n * @param {*} payload\n * @param {T} type\n * @throws {TypeError} Will throw type error if type is an invalid type\n * @returns {payload is T}\n */\n\n\nfunction isType(payload, type) {\n  if (!(type instanceof Function)) {\n    throw new TypeError('Type must be a function');\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(type, 'prototype')) {\n    throw new TypeError('Type is not a class');\n  } // Classes usually have names (as functions usually have names)\n\n\n  var name = type.name;\n  return getType(payload) === name || Boolean(payload && payload.constructor === type);\n}\n\nexport { getType, isAnyObject, isArray, isBlob, isBoolean, isDate, isEmptyArray, isEmptyObject, isEmptyString, isError, isFile, isFullArray, isFullObject, isFullString, isFunction, isMap, isNaNValue, isNull, isNullOrUndefined, isNumber, isObject, isObjectLike, isOneOf, isPlainObject, isPrimitive, isPromise, isRegExp, isSet, isString, isSymbol, isType, isUndefined, isWeakMap, isWeakSet };","map":{"version":3,"sources":["/Users/nanyang/AY20S2/CS9080/LookingGlass/lookingglass/node_modules/is-what/dist/index.esm.js"],"names":["getType","payload","Object","prototype","toString","call","slice","isUndefined","isNull","isPlainObject","constructor","getPrototypeOf","isObject","isEmptyObject","keys","length","isFullObject","isAnyObject","isObjectLike","isFunction","isArray","isFullArray","isEmptyArray","isString","isFullString","isEmptyString","isNumber","isNaN","isBoolean","isRegExp","isMap","isWeakMap","isSet","isWeakSet","isSymbol","isDate","isBlob","isFile","isPromise","isError","isNaNValue","isPrimitive","isNullOrUndefined","isOneOf","a","b","c","d","e","value","isType","type","Function","TypeError","hasOwnProperty","name","Boolean"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,CAAiBC,OAAjB,EAA0B;AACtB,SAAOC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,OAA/B,EAAwCK,KAAxC,CAA8C,CAA9C,EAAiD,CAAC,CAAlD,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBN,OAArB,EAA8B;AAC1B,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,WAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,MAAT,CAAgBP,OAAhB,EAAyB;AACrB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,MAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,aAAT,CAAuBR,OAAvB,EAAgC;AAC5B,MAAID,OAAO,CAACC,OAAD,CAAP,KAAqB,QAAzB,EACI,OAAO,KAAP;AACJ,SAAOA,OAAO,CAACS,WAAR,KAAwBR,MAAxB,IAAkCA,MAAM,CAACS,cAAP,CAAsBV,OAAtB,MAAmCC,MAAM,CAACC,SAAnF;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,QAAT,CAAkBX,OAAlB,EAA2B;AACvB,SAAOQ,aAAa,CAACR,OAAD,CAApB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASY,aAAT,CAAuBZ,OAAvB,EAAgC;AAC5B,SAAOQ,aAAa,CAACR,OAAD,CAAb,IAA0BC,MAAM,CAACY,IAAP,CAAYb,OAAZ,EAAqBc,MAArB,KAAgC,CAAjE;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,CAAsBf,OAAtB,EAA+B;AAC3B,SAAOQ,aAAa,CAACR,OAAD,CAAb,IAA0BC,MAAM,CAACY,IAAP,CAAYb,OAAZ,EAAqBc,MAArB,GAA8B,CAA/D;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqBhB,OAArB,EAA8B;AAC1B,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,QAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiB,YAAT,CAAsBjB,OAAtB,EAA+B;AAC3B,SAAOgB,WAAW,CAAChB,OAAD,CAAlB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkB,UAAT,CAAoBlB,OAApB,EAA6B;AACzB,SAAO,OAAOA,OAAP,KAAmB,UAA1B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmB,OAAT,CAAiBnB,OAAjB,EAA0B;AACtB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,OAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoB,WAAT,CAAqBpB,OAArB,EAA8B;AAC1B,SAAOmB,OAAO,CAACnB,OAAD,CAAP,IAAoBA,OAAO,CAACc,MAAR,GAAiB,CAA5C;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,YAAT,CAAsBrB,OAAtB,EAA+B;AAC3B,SAAOmB,OAAO,CAACnB,OAAD,CAAP,IAAoBA,OAAO,CAACc,MAAR,KAAmB,CAA9C;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,QAAT,CAAkBtB,OAAlB,EAA2B;AACvB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,QAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuB,YAAT,CAAsBvB,OAAtB,EAA+B;AAC3B,SAAOsB,QAAQ,CAACtB,OAAD,CAAR,IAAqBA,OAAO,KAAK,EAAxC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwB,aAAT,CAAuBxB,OAAvB,EAAgC;AAC5B,SAAOA,OAAO,KAAK,EAAnB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyB,QAAT,CAAkBzB,OAAlB,EAA2B;AACvB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,QAArB,IAAiC,CAAC0B,KAAK,CAAC1B,OAAD,CAA9C;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2B,SAAT,CAAmB3B,OAAnB,EAA4B;AACxB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,SAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS4B,QAAT,CAAkB5B,OAAlB,EAA2B;AACvB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,QAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6B,KAAT,CAAe7B,OAAf,EAAwB;AACpB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,KAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8B,SAAT,CAAmB9B,OAAnB,EAA4B;AACxB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,SAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+B,KAAT,CAAe/B,OAAf,EAAwB;AACpB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,KAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgC,SAAT,CAAmBhC,OAAnB,EAA4B;AACxB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,SAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiC,QAAT,CAAkBjC,OAAlB,EAA2B;AACvB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,QAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkC,MAAT,CAAgBlC,OAAhB,EAAyB;AACrB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,MAArB,IAA+B,CAAC0B,KAAK,CAAC1B,OAAD,CAA5C;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmC,MAAT,CAAgBnC,OAAhB,EAAyB;AACrB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,MAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoC,MAAT,CAAgBpC,OAAhB,EAAyB;AACrB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,MAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqC,SAAT,CAAmBrC,OAAnB,EAA4B;AACxB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,SAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsC,OAAT,CAAiBtC,OAAjB,EAA0B;AACtB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,OAA5B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuC,UAAT,CAAoBvC,OAApB,EAA6B;AACzB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,QAArB,IAAiC0B,KAAK,CAAC1B,OAAD,CAA7C;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwC,WAAT,CAAqBxC,OAArB,EAA8B;AAC1B,SAAQ2B,SAAS,CAAC3B,OAAD,CAAT,IACJO,MAAM,CAACP,OAAD,CADF,IAEJM,WAAW,CAACN,OAAD,CAFP,IAGJyB,QAAQ,CAACzB,OAAD,CAHJ,IAIJsB,QAAQ,CAACtB,OAAD,CAJJ,IAKJiC,QAAQ,CAACjC,OAAD,CALZ;AAMH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIyC,iBAAiB,GAAGC,OAAO,CAACnC,MAAD,EAASD,WAAT,CAA/B;;AACA,SAASoC,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0BC,CAA1B,EAA6BC,CAA7B,EAAgC;AAC5B,SAAO,UAAUC,KAAV,EAAiB;AACpB,WAAOL,CAAC,CAACK,KAAD,CAAD,IAAYJ,CAAC,CAACI,KAAD,CAAb,IAAyB,CAAC,CAACH,CAAF,IAAOA,CAAC,CAACG,KAAD,CAAjC,IAA8C,CAAC,CAACF,CAAF,IAAOA,CAAC,CAACE,KAAD,CAAtD,IAAmE,CAAC,CAACD,CAAF,IAAOA,CAAC,CAACC,KAAD,CAAlF;AACH,GAFD;AAGH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBjD,OAAhB,EAAyBkD,IAAzB,EAA+B;AAC3B,MAAI,EAAEA,IAAI,YAAYC,QAAlB,CAAJ,EAAiC;AAC7B,UAAM,IAAIC,SAAJ,CAAc,yBAAd,CAAN;AACH;;AACD,MAAI,CAACnD,MAAM,CAACC,SAAP,CAAiBmD,cAAjB,CAAgCjD,IAAhC,CAAqC8C,IAArC,EAA2C,WAA3C,CAAL,EAA8D;AAC1D,UAAM,IAAIE,SAAJ,CAAc,qBAAd,CAAN;AACH,GAN0B,CAO3B;;;AACA,MAAIE,IAAI,GAAGJ,IAAI,CAACI,IAAhB;AACA,SAAOvD,OAAO,CAACC,OAAD,CAAP,KAAqBsD,IAArB,IAA6BC,OAAO,CAACvD,OAAO,IAAIA,OAAO,CAACS,WAAR,KAAwByC,IAApC,CAA3C;AACH;;AAED,SAASnD,OAAT,EAAkBiB,WAAlB,EAA+BG,OAA/B,EAAwCgB,MAAxC,EAAgDR,SAAhD,EAA2DO,MAA3D,EAAmEb,YAAnE,EAAiFT,aAAjF,EAAgGY,aAAhG,EAA+Gc,OAA/G,EAAwHF,MAAxH,EAAgIhB,WAAhI,EAA6IL,YAA7I,EAA2JQ,YAA3J,EAAyKL,UAAzK,EAAqLW,KAArL,EAA4LU,UAA5L,EAAwMhC,MAAxM,EAAgNkC,iBAAhN,EAAmOhB,QAAnO,EAA6Od,QAA7O,EAAuPM,YAAvP,EAAqQyB,OAArQ,EAA8QlC,aAA9Q,EAA6RgC,WAA7R,EAA0SH,SAA1S,EAAqTT,QAArT,EAA+TG,KAA/T,EAAsUT,QAAtU,EAAgVW,QAAhV,EAA0VgB,MAA1V,EAAkW3C,WAAlW,EAA+WwB,SAA/W,EAA0XE,SAA1X","sourcesContent":["/**\n * Returns the object type of the given payload\n *\n * @param {*} payload\n * @returns {string}\n */\nfunction getType(payload) {\n    return Object.prototype.toString.call(payload).slice(8, -1);\n}\n/**\n * Returns whether the payload is undefined\n *\n * @param {*} payload\n * @returns {payload is undefined}\n */\nfunction isUndefined(payload) {\n    return getType(payload) === 'Undefined';\n}\n/**\n * Returns whether the payload is null\n *\n * @param {*} payload\n * @returns {payload is null}\n */\nfunction isNull(payload) {\n    return getType(payload) === 'Null';\n}\n/**\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\n *\n * @param {*} payload\n * @returns {payload is PlainObject}\n */\nfunction isPlainObject(payload) {\n    if (getType(payload) !== 'Object')\n        return false;\n    return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;\n}\n/**\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\n *\n * @param {*} payload\n * @returns {payload is PlainObject}\n */\nfunction isObject(payload) {\n    return isPlainObject(payload);\n}\n/**\n * Returns whether the payload is a an empty object (excluding special classes or objects with other prototypes)\n *\n * @param {*} payload\n * @returns {payload is { [K in any]: never }}\n */\nfunction isEmptyObject(payload) {\n    return isPlainObject(payload) && Object.keys(payload).length === 0;\n}\n/**\n * Returns whether the payload is a an empty object (excluding special classes or objects with other prototypes)\n *\n * @param {*} payload\n * @returns {payload is PlainObject}\n */\nfunction isFullObject(payload) {\n    return isPlainObject(payload) && Object.keys(payload).length > 0;\n}\n/**\n * Returns whether the payload is an any kind of object (including special classes or objects with different prototypes)\n *\n * @param {*} payload\n * @returns {payload is PlainObject}\n */\nfunction isAnyObject(payload) {\n    return getType(payload) === 'Object';\n}\n/**\n * Returns whether the payload is an object like a type passed in < >\n *\n * Usage: isObjectLike<{id: any}>(payload) // will make sure it's an object and has an `id` prop.\n *\n * @template T this must be passed in < >\n * @param {*} payload\n * @returns {payload is T}\n */\nfunction isObjectLike(payload) {\n    return isAnyObject(payload);\n}\n/**\n * Returns whether the payload is a function (regular or async)\n *\n * @param {*} payload\n * @returns {payload is AnyFunction}\n */\nfunction isFunction(payload) {\n    return typeof payload === 'function';\n}\n/**\n * Returns whether the payload is an array\n *\n * @param {any} payload\n * @returns {payload is any[]}\n */\nfunction isArray(payload) {\n    return getType(payload) === 'Array';\n}\n/**\n * Returns whether the payload is a an array with at least 1 item\n *\n * @param {*} payload\n * @returns {payload is any[]}\n */\nfunction isFullArray(payload) {\n    return isArray(payload) && payload.length > 0;\n}\n/**\n * Returns whether the payload is a an empty array\n *\n * @param {*} payload\n * @returns {payload is []}\n */\nfunction isEmptyArray(payload) {\n    return isArray(payload) && payload.length === 0;\n}\n/**\n * Returns whether the payload is a string\n *\n * @param {*} payload\n * @returns {payload is string}\n */\nfunction isString(payload) {\n    return getType(payload) === 'String';\n}\n/**\n * Returns whether the payload is a string, BUT returns false for ''\n *\n * @param {*} payload\n * @returns {payload is string}\n */\nfunction isFullString(payload) {\n    return isString(payload) && payload !== '';\n}\n/**\n * Returns whether the payload is ''\n *\n * @param {*} payload\n * @returns {payload is string}\n */\nfunction isEmptyString(payload) {\n    return payload === '';\n}\n/**\n * Returns whether the payload is a number (but not NaN)\n *\n * This will return `false` for `NaN`!!\n *\n * @param {*} payload\n * @returns {payload is number}\n */\nfunction isNumber(payload) {\n    return getType(payload) === 'Number' && !isNaN(payload);\n}\n/**\n * Returns whether the payload is a boolean\n *\n * @param {*} payload\n * @returns {payload is boolean}\n */\nfunction isBoolean(payload) {\n    return getType(payload) === 'Boolean';\n}\n/**\n * Returns whether the payload is a regular expression (RegExp)\n *\n * @param {*} payload\n * @returns {payload is RegExp}\n */\nfunction isRegExp(payload) {\n    return getType(payload) === 'RegExp';\n}\n/**\n * Returns whether the payload is a Map\n *\n * @param {*} payload\n * @returns {payload is Map<any, any>}\n */\nfunction isMap(payload) {\n    return getType(payload) === 'Map';\n}\n/**\n * Returns whether the payload is a WeakMap\n *\n * @param {*} payload\n * @returns {payload is WeakMap<any, any>}\n */\nfunction isWeakMap(payload) {\n    return getType(payload) === 'WeakMap';\n}\n/**\n * Returns whether the payload is a Set\n *\n * @param {*} payload\n * @returns {payload is Set<any>}\n */\nfunction isSet(payload) {\n    return getType(payload) === 'Set';\n}\n/**\n * Returns whether the payload is a WeakSet\n *\n * @param {*} payload\n * @returns {payload is WeakSet<any>}\n */\nfunction isWeakSet(payload) {\n    return getType(payload) === 'WeakSet';\n}\n/**\n * Returns whether the payload is a Symbol\n *\n * @param {*} payload\n * @returns {payload is symbol}\n */\nfunction isSymbol(payload) {\n    return getType(payload) === 'Symbol';\n}\n/**\n * Returns whether the payload is a Date, and that the date is valid\n *\n * @param {*} payload\n * @returns {payload is Date}\n */\nfunction isDate(payload) {\n    return getType(payload) === 'Date' && !isNaN(payload);\n}\n/**\n * Returns whether the payload is a Blob\n *\n * @param {*} payload\n * @returns {payload is Blob}\n */\nfunction isBlob(payload) {\n    return getType(payload) === 'Blob';\n}\n/**\n * Returns whether the payload is a File\n *\n * @param {*} payload\n * @returns {payload is File}\n */\nfunction isFile(payload) {\n    return getType(payload) === 'File';\n}\n/**\n * Returns whether the payload is a Promise\n *\n * @param {*} payload\n * @returns {payload is Promise<any>}\n */\nfunction isPromise(payload) {\n    return getType(payload) === 'Promise';\n}\n/**\n * Returns whether the payload is an Error\n *\n * @param {*} payload\n * @returns {payload is Error}\n */\nfunction isError(payload) {\n    return getType(payload) === 'Error';\n}\n/**\n * Returns whether the payload is literally the value `NaN` (it's `NaN` and also a `number`)\n *\n * @param {*} payload\n * @returns {payload is typeof NaN}\n */\nfunction isNaNValue(payload) {\n    return getType(payload) === 'Number' && isNaN(payload);\n}\n/**\n * Returns whether the payload is a primitive type (eg. Boolean | Null | Undefined | Number | String | Symbol)\n *\n * @param {*} payload\n * @returns {(payload is boolean | null | undefined | number | string | symbol)}\n */\nfunction isPrimitive(payload) {\n    return (isBoolean(payload) ||\n        isNull(payload) ||\n        isUndefined(payload) ||\n        isNumber(payload) ||\n        isString(payload) ||\n        isSymbol(payload));\n}\n/**\n * Returns true whether the payload is null or undefined\n *\n * @param {*} payload\n * @returns {(payload is null | undefined)}\n */\nvar isNullOrUndefined = isOneOf(isNull, isUndefined);\nfunction isOneOf(a, b, c, d, e) {\n    return function (value) {\n        return a(value) || b(value) || (!!c && c(value)) || (!!d && d(value)) || (!!e && e(value));\n    };\n}\n/**\n * Does a generic check to check that the given payload is of a given type.\n * In cases like Number, it will return true for NaN as NaN is a Number (thanks javascript!);\n * It will, however, differentiate between object and null\n *\n * @template T\n * @param {*} payload\n * @param {T} type\n * @throws {TypeError} Will throw type error if type is an invalid type\n * @returns {payload is T}\n */\nfunction isType(payload, type) {\n    if (!(type instanceof Function)) {\n        throw new TypeError('Type must be a function');\n    }\n    if (!Object.prototype.hasOwnProperty.call(type, 'prototype')) {\n        throw new TypeError('Type is not a class');\n    }\n    // Classes usually have names (as functions usually have names)\n    var name = type.name;\n    return getType(payload) === name || Boolean(payload && payload.constructor === type);\n}\n\nexport { getType, isAnyObject, isArray, isBlob, isBoolean, isDate, isEmptyArray, isEmptyObject, isEmptyString, isError, isFile, isFullArray, isFullObject, isFullString, isFunction, isMap, isNaNValue, isNull, isNullOrUndefined, isNumber, isObject, isObjectLike, isOneOf, isPlainObject, isPrimitive, isPromise, isRegExp, isSet, isString, isSymbol, isType, isUndefined, isWeakMap, isWeakSet };\n"]},"metadata":{},"sourceType":"module"}