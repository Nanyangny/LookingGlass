{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nanyang/AY20S2/CS9080/LookingGlass/lookingglass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nanyang/AY20S2/CS9080/LookingGlass/lookingglass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import TLError from\"../core/TLError\";import{fetchCSV}from'../core/CSV';import{trim,isEmptyObject,mergeData,trace}from\"../core/Util\";import $ from'jquery';function clean_integer(s){if(s){return s.replace(/[\\s,]+/g,'');// doesn't handle '.' as comma separator, but how to distinguish that from decimal separator?\n}}/**\n * Given a Google Sheets URL or a bare spreadsheet key, return a URL expected\n * to retrieve a CSV file, assuming the Sheets doc has been \"published to the web\".\n * No checking for the actual availability is done.\n * @param {string} url_or_key \n */export function makeGoogleCSVURL(url_or_key){url_or_key=url_or_key.trim();if(url_or_key.match(/^[a-zA-Z0-9-_]+$/)){// key pattern from https://developers.google.com/sheets/api/guides/concepts#spreadsheet_id\nreturn\"https://docs.google.com/spreadsheets/d/\".concat(url_or_key,\"/pub?output=csv\");}if(url_or_key.startsWith('https://docs.google.com/spreadsheets/')){if(url_or_key.match(/\\/pub\\?output=csv$/))return url_or_key;var parsed=new URL(url_or_key);var params=new URLSearchParams(parsed.search);params.set('output','csv');if(params.get('gid')){params.set('single','true');}parsed.search=\"?\".concat(params.toString());var base_path=parsed.pathname.substr(0,parsed.pathname.lastIndexOf('/'));parsed.pathname=\"\".concat(base_path,\"/pub\");return parsed.toString();}throw new TLError('invalid_url_err',url_or_key);}/**\n * Given a Google Sheets URL (or mere document ID), read the data and return\n * a Timeline JSON file suitable for instantiating a timeline.\n * \n * @param {string} url \n */export function readGoogleAsCSV(_x,_x2){return _readGoogleAsCSV.apply(this,arguments);}function _readGoogleAsCSV(){_readGoogleAsCSV=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url,sheets_proxy){var rows,error,topic_list_config;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:rows=[];url=makeGoogleCSVURL(url);error=null;_context2.next=5;return fetchCSV({url:\"\".concat(sheets_proxy).concat(url)}).then(function(d){rows=d;}).catch(function(error_json){if(error_json.proxy_err_code=='response_not_csv'){throw new TLError('Timeline could not read the data for your timeline. Make sure you have published it to the web.');}throw new TLError(error_json.message);});case 5:topic_list_config={'events':[],'errors':[],'warnings':[],'eras':[],'topics':[]};rows.forEach(function(row,i){try{if(!isEmptyObject(row)){var event=extractEventFromCSVObject(row);handleRow(event,topic_list_config);}}catch(e){if(e.constructor==TLError){topic_list_config.errors.push(e);}else{if(e.message){e=e.message;}var label=row['Headline']||i;topic_list_config.errors.push(e+\"[\".concat(label,\"]\"));}}});// console.log(topic_list_config);\nreturn _context2.abrupt(\"return\",topic_list_config);case 8:case\"end\":return _context2.stop();}}},_callee2);}));return _readGoogleAsCSV.apply(this,arguments);}function handleRow(event,timeline_config){var row_type='event';if(typeof event.type!='undefined'){row_type=event.type;delete event.type;}var url=event.article_url;timeline_config.topics.push(event);fetch(\"https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States\",{'mode':'no-cors'}).then(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(res){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return res.text();case 2:result=_context.sent;console.log(result);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x3){return _ref.apply(this,arguments);};}());// fetch(url, {'mode':'no-cors'}).then(res=>{\n//     console.log(result);\n// });\n// .then(function(t){\n//     if(200==t.status)\n//     return t.text?t.text():\"no text\"\n// });\n// window.fetch(url, { mode: 'cors' })\n//             .then(function(response) {\n//                 if (response.status != 200) {\n//                     if (response.headers.get('content-type') == \"application/json\") {\n//                         response.text().then(text => {\n//                             console.log(\"uncessful\");\n//                         })\n//                     } else {\n//                        console.log(\"uncessful\");\n//                     }\n//                     return;\n//                 }\n//                 if (response.text) {\n//                     return response.text();\n//                 } else {\n//                     return response;\n//                 }\n//             })\n//             .catch(msg => {\n//                 console.log(\"uncessful\");\n//                 return;\n//             });\n}function extractEventFromCSVObject(orig_row){var row={};Object.keys(orig_row).forEach(function(k){row[k]=trim(orig_row[k]);// get rid of white-space and reduce all-blank cells to empty strings\n});var d={// media: {\n//     caption: row['Media Caption'] || '',\n//     credit: row['Media Credit'] || '',\n//     url: row['Media'] || '',\n//     thumbnail: row['Media Thumbnail'] || ''\n// },\n// text: {\n//     headline: row['Headline'] || '',\n//     text: row['Text'] || ''\n// },\n// display_date: row['Display Date'] || '', // only in v3 but no problem\n// group: row['Group'] || row['Tag'] || '', // small diff between v1 and v3 sheets\n// // background: interpretBackground(row['Background']), // only in v3 but no problem\n// type: row['Type'] || '',\ntopic_keyword:row['keyword']||'',article_url:row['url']||''};// if (Object.keys(row).includes('Start Date') || Object.keys(row).includes('End Date')) {\n//     // V1 date handling\n//     // if (row['Start Date']) {\n//     //     d.start_date = parseDate(row['Start Date'])\n//     // }\n//     // if (row['End Date']) {\n//     //     d.end_date = parseDate(row['End Date'])\n//     // }\n// } else {\n//     // V3 date handling\n//     // every date must have at least a year to be valid.\n//     if (row['Year']) {\n//         d.start_date = {\n//             year: clean_integer(row['Year']),\n//             month: clean_integer(row['Month']) || '',\n//             day: clean_integer(row['Day']) || ''\n//         }\n//     }\n//     if (row['End Year']) {\n//         d.end_date = {\n//             year: clean_integer(row['End Year']) || '',\n//             month: clean_integer(row['End Month']) || '',\n//             day: clean_integer(row['End Day']) || ''\n//         }\n//     }\n//     if (row['Time']) {\n//         // if (d.start_date) {\n//         //     mergeData(d.start_date, parseTime(row['Time']));\n//         // } else {\n//         //     throw new TLError(\"invalid_start_time_without_date\")\n//         // }\n//     }\n//     if (row['End Time']) {\n//         // if (d.end_date) {\n//         //     mergeData(d.end_date, parseTime(row['End Time']));\n//         // } else {\n//         //     throw new TLError(\"invalid_end_time_without_date\")\n//         // }\n//     }\n//     // if (d.start_date && !validDateConfig(d.start_date)) {\n//     //     throw new TLError(\"invalid_date_err\")\n//     // }\n//     // if (d.end_date && !validDateConfig(d.end_date)) {\n//     //     throw new TLError(\"invalid_date_err\")\n//     // }\nreturn d;}","map":{"version":3,"sources":["/Users/nanyang/AY20S2/CS9080/LookingGlass/lookingglass/src/core/Config.js"],"names":["TLError","fetchCSV","trim","isEmptyObject","mergeData","trace","$","clean_integer","s","replace","makeGoogleCSVURL","url_or_key","match","startsWith","parsed","URL","params","URLSearchParams","search","set","get","toString","base_path","pathname","substr","lastIndexOf","readGoogleAsCSV","url","sheets_proxy","rows","error","then","d","catch","error_json","proxy_err_code","message","topic_list_config","forEach","row","i","event","extractEventFromCSVObject","handleRow","e","constructor","errors","push","label","timeline_config","row_type","type","article_url","topics","fetch","res","text","result","console","log","orig_row","Object","keys","k","topic_keyword"],"mappings":"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","sourcesContent":["import TLError from \"../core/TLError\"\nimport { fetchCSV } from '../core/CSV';\nimport { trim, isEmptyObject, mergeData, trace } from \"../core/Util\";\nimport $ from 'jquery';\nfunction clean_integer(s) {\n    if (s) {\n        return s.replace(/[\\s,]+/g, ''); // doesn't handle '.' as comma separator, but how to distinguish that from decimal separator?\n    }\n}\n\n\n/**\n * Given a Google Sheets URL or a bare spreadsheet key, return a URL expected\n * to retrieve a CSV file, assuming the Sheets doc has been \"published to the web\".\n * No checking for the actual availability is done.\n * @param {string} url_or_key \n */\nexport function makeGoogleCSVURL(url_or_key) {\n    url_or_key = url_or_key.trim()\n    if (url_or_key.match(/^[a-zA-Z0-9-_]+$/)) {\n        // key pattern from https://developers.google.com/sheets/api/guides/concepts#spreadsheet_id\n        return `https://docs.google.com/spreadsheets/d/${url_or_key}/pub?output=csv`\n    }\n\n    if (url_or_key.startsWith('https://docs.google.com/spreadsheets/')) {\n        if (url_or_key.match(/\\/pub\\?output=csv$/)) return url_or_key\n        let parsed = new URL(url_or_key)\n        let params = new URLSearchParams(parsed.search)\n        params.set('output', 'csv')\n        if (params.get('gid')) {\n            params.set('single', 'true')\n        }\n        parsed.search = `?${params.toString()}`\n        let base_path = parsed.pathname.substr(0, parsed.pathname.lastIndexOf('/'))\n        parsed.pathname = `${base_path}/pub`\n        return parsed.toString()\n    }\n    throw new TLError('invalid_url_err', url_or_key);\n}\n\n/**\n * Given a Google Sheets URL (or mere document ID), read the data and return\n * a Timeline JSON file suitable for instantiating a timeline.\n * \n * @param {string} url \n */\nexport async function readGoogleAsCSV(url, sheets_proxy) {\n\n    let rows = []\n\n    url = makeGoogleCSVURL(url)\n    let error = null;\n\n    await fetchCSV({\n        url: `${sheets_proxy}${url}`,\n    }).then(d => {\n        rows = d;\n    }).catch(error_json => {\n        if (error_json.proxy_err_code == 'response_not_csv') {\n            throw new TLError('Timeline could not read the data for your timeline. Make sure you have published it to the web.')\n        }\n        throw new TLError(error_json.message)\n    })\n\n    let topic_list_config = { 'events': [], 'errors': [], 'warnings': [], 'eras': [],'topics':[] }\n\n    rows.forEach((row, i) => {\n        \n        try {\n            if (!isEmptyObject(row)) {\n                let event = extractEventFromCSVObject(row)\n                handleRow(event, topic_list_config)\n            }\n        } catch (e) {\n            if (e.constructor == TLError) {\n                topic_list_config.errors.push(e);\n            } else {\n                if (e.message) {\n                    e = e.message;\n                }\n                let label = row['Headline'] || i\n                topic_list_config.errors.push(e + `[${label}]`);\n            }\n        }\n    });\n    // console.log(topic_list_config);\n    return topic_list_config\n}\n\nfunction handleRow(event, timeline_config) {\n    var row_type = 'event';\n    if (typeof(event.type) != 'undefined') {\n        row_type = event.type;\n        delete event.type;\n    }\n    let url  = event.article_url;\n    timeline_config.topics.push(event);\n\n\n    fetch(\"https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States\", {'mode':'no-cors'})\n    .then(async res=>{\n        let result = await res.text();\n        console.log(result);\n    });\n    // fetch(url, {'mode':'no-cors'}).then(res=>{\n    //     console.log(result);\n    // });\n    \n    \n    // .then(function(t){\n    //     if(200==t.status)\n    //     return t.text?t.text():\"no text\"\n    // });\n\n   \n\n    // window.fetch(url, { mode: 'cors' })\n    //             .then(function(response) {\n    //                 if (response.status != 200) {\n    //                     if (response.headers.get('content-type') == \"application/json\") {\n    //                         response.text().then(text => {\n    //                             console.log(\"uncessful\");\n    //                         })\n    //                     } else {\n    //                        console.log(\"uncessful\");\n    //                     }\n    //                     return;\n    //                 }\n    //                 if (response.text) {\n    //                     return response.text();\n    //                 } else {\n    //                     return response;\n    //                 }\n    //             })\n    //             .catch(msg => {\n    //                 console.log(\"uncessful\");\n    //                 return;\n    //             });\n\n}\n\nfunction extractEventFromCSVObject(orig_row) {\n\n    let row = {}\n    Object.keys(orig_row).forEach(k => {\n        row[k] = trim(orig_row[k]) // get rid of white-space and reduce all-blank cells to empty strings\n    })\n    var d = {\n        // media: {\n        //     caption: row['Media Caption'] || '',\n        //     credit: row['Media Credit'] || '',\n        //     url: row['Media'] || '',\n        //     thumbnail: row['Media Thumbnail'] || ''\n        // },\n        // text: {\n        //     headline: row['Headline'] || '',\n        //     text: row['Text'] || ''\n        // },\n        // display_date: row['Display Date'] || '', // only in v3 but no problem\n        // group: row['Group'] || row['Tag'] || '', // small diff between v1 and v3 sheets\n        // // background: interpretBackground(row['Background']), // only in v3 but no problem\n        // type: row['Type'] || '',\n        topic_keyword:row['keyword'] || '',\n        article_url:row['url'] || ''\n\n    }\n\n    // if (Object.keys(row).includes('Start Date') || Object.keys(row).includes('End Date')) {\n    //     // V1 date handling\n    //     // if (row['Start Date']) {\n    //     //     d.start_date = parseDate(row['Start Date'])\n    //     // }\n    //     // if (row['End Date']) {\n    //     //     d.end_date = parseDate(row['End Date'])\n    //     // }\n    // } else {\n    //     // V3 date handling\n    //     // every date must have at least a year to be valid.\n    //     if (row['Year']) {\n    //         d.start_date = {\n    //             year: clean_integer(row['Year']),\n    //             month: clean_integer(row['Month']) || '',\n    //             day: clean_integer(row['Day']) || ''\n    //         }\n    //     }\n    //     if (row['End Year']) {\n    //         d.end_date = {\n    //             year: clean_integer(row['End Year']) || '',\n    //             month: clean_integer(row['End Month']) || '',\n    //             day: clean_integer(row['End Day']) || ''\n    //         }\n    //     }\n\n    //     if (row['Time']) {\n    //         // if (d.start_date) {\n    //         //     mergeData(d.start_date, parseTime(row['Time']));\n    //         // } else {\n    //         //     throw new TLError(\"invalid_start_time_without_date\")\n    //         // }\n    //     }\n\n    //     if (row['End Time']) {\n    //         // if (d.end_date) {\n    //         //     mergeData(d.end_date, parseTime(row['End Time']));\n    //         // } else {\n    //         //     throw new TLError(\"invalid_end_time_without_date\")\n    //         // }\n    //     }\n\n    //     // if (d.start_date && !validDateConfig(d.start_date)) {\n    //     //     throw new TLError(\"invalid_date_err\")\n    //     // }\n\n    //     // if (d.end_date && !validDateConfig(d.end_date)) {\n    //     //     throw new TLError(\"invalid_date_err\")\n    //     // }\n\n\n    return d\n}\n"]},"metadata":{},"sourceType":"module"}